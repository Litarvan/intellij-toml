
///////////////////////////////////////////////////////////////////////////////////////////////////
// Buildscript
///////////////////////////////////////////////////////////////////////////////////////////////////

if (rootProject == project) {

    buildscript {
        repositories {
            mavenCentral()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }

        dependencies {
            classpath 'gradle.plugin.org.jetbrains:gradle-intellij-plugin:0.0.39'
        }
    }

}

apply plugin: 'org.jetbrains.intellij'


///////////////////////////////////////////////////////////////////////////////////////////////////
// Projects
///////////////////////////////////////////////////////////////////////////////////////////////////

apply plugin: 'java'
apply plugin: 'kotlin'

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

sourceSets {
    main.java.srcDirs += "gen"
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// IntelliJ plugin configuration
///////////////////////////////////////////////////////////////////////////////////////////////////

intellij {
  pluginName 'intellij-toml'

  version ideaVersion
  downloadSources Boolean.valueOf(downloadIdeaSources)

  sandboxDirectory project.rootDir.canonicalPath + "/.sandbox"
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// IDE support
///////////////////////////////////////////////////////////////////////////////////////////////////

if (rootProject == project) {

  apply plugin: 'idea'

  idea {
      project {
          jdkName         = javaVersion
          languageLevel   = javaVersion
      }

      module {
          generatedSourceDirs += file('gen')
      }
  }

}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Configurations
///////////////////////////////////////////////////////////////////////////////////////////////////

configurations {
    gen
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Tasks
///////////////////////////////////////////////////////////////////////////////////////////////////

def jflexArgs(srcFlex, targetDir) {
    return [    "--skel",   "src/main/kotlin/org/toml/lang/core/lexer/TomlLexer.skeleton",
                "-d",       targetDir,
                srcFlex
    ]
}

task generateTomlLexer(type: JavaExec) {
    ext.src = "src/main/kotlin/org/toml/lang/core/lexer/TomlLexer.flex"
    ext.dst = "gen/org/toml/lang/core/lexer/"

    main = "jflex.Main"

    args = jflexArgs(src, dst)

    inputs  .file   file(src)
    outputs .dir    file(dst + "_TomlLexer.java")

    classpath configurations.gen
}

task generateTomlPsiAndParser(type: JavaExec) {
    ext.src     = "src/main/kotlin/org/toml/lang/core/grammar/toml.bnf"
    ext.dstRoot = "gen"

    main = "org.intellij.grammar.Main"

    args = [ dstRoot, file(src) ]

    inputs  .file   file(src)
    outputs .dir    fileTree(dir: dstRoot + '/org/toml/lang/core/', include: '**/*.java')

    classpath configurations.gen
}

task generateLexers {
    dependsOn generateTomlLexer
}

task generateParsers {
    dependsOn generateTomlPsiAndParser
}

apply from: "../shared.gradle"


///////////////////////////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////////////////////////

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-runtime:$kotlinVersion"

    gen 'de.jflex:jflex:1.6.0'
    gen files('lib/gk/grammar-kit-patched.jar')

    testCompile "junit:junit:4.+"
    testCompile 'org.assertj:assertj-core:3.2.0'
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Misc
///////////////////////////////////////////////////////////////////////////////////////////////////

version = "${version}.$buildNumber"

jar.archiveName = "toml.jar"
